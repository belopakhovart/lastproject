import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
from data import db_session
from data.users import User
from data.indicators import Indicators
from data.mapapi import *
import requests
from bs4 import BeautifulSoup

from config import TOKEN_VK, GROUP_ID

db_session.global_init("db/info.sqlite")
session = db_session.create_session()

users_data = {}

answers = {'–î–∞': True, '–ù–µ—Ç': False}

vk_session = vk_api.VkApi(token=TOKEN_VK)

RULES = '''–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–æ–≤–æ–π –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏
–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–ø—ã—à–∫–µ COVID-19, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ –í–û–ó, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –æ—Ä–≥–∞–Ω–æ–≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã –∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞. –ù–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ —Å–ª—É—á–∞–µ–≤ COVID-19 –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤—ã—è–≤–ª–µ–Ω–æ –≤ –ö–∏—Ç–∞–µ, —Ç–æ–≥–¥–∞ –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –æ—Ç–º–µ—á–∞—é—Ç—Å—è –≤—Å–ø—ã—à–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –ª–µ–≥–∫–∏–º —Ç–µ—á–µ–Ω–∏–µ–º –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ–º, —Ö–æ—Ç—è –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è. –ó–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –º–æ–∂–Ω–æ, —Å–æ–±–ª—é–¥–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞: 
'''

QUESTIONS = [('–ö–∞–∫–∞—è —É –í–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?', 0),
             ('–ß–∞—Å—Ç–æ –ª–∏ –í—ã –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å –ª—é–¥—å–º–∏?', 1),
             ('–ë—ã–ª–∏ –ª–∏ –í—ã –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π –Ω–µ–¥–∞–≤–Ω–æ?', 1),
             ('–ö–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å –∑–∞–±–æ–ª–µ–≤—à–∏–º–∏?', 1),
             ('–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –≤ –ø–µ—Ä–∏–æ–¥ —ç–ø–∏–¥–µ–º–∏–∏?', 1),
             ('–°–æ–±–ª—é–¥–∞–µ—Ç–µ –ª–∏ –í—ã —Å–∞–º–æ–∏–∑–æ–ª—è—Ü–∏—é?', 1),
             ('–í–∞—à –∞–¥—Ä–µ—Å', 0),
             ('–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?', 2)]


class MessageError(Exception):
    pass


def parse_news():
    url = 'https://coronavirus-monitor.ru/ru/novosti'
    response = requests.get(url).text
    if response:
        soup = BeautifulSoup(response, 'html.parser')
        news = [[i.span.text, 'https://coronavirus-monitor.ru/' + i.a.attrs["href"], i.p.text]
                for i in soup.find_all('div', {'class': 'news-element'})]
        return news[:5]
    else:
        print('error while getting page, status code: {}'.format(response.status_code))
        return None


def auth_handler():
    """ –ü—Ä–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è. """
    key = input("Enter authentication code: ")
    remember_device = True
    return key, remember_device


def generate_keyboard(n):
    keyboard = VkKeyboard(one_time=True)
    if n == 2:
        keyboard.add_button('–ö–∞—Ä—Ç–∞', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ —ç–ø–∏–¥–µ–º–∏–∏', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ù–æ–≤–æ—Å—Ç–∏ –æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–µ', color=VkKeyboardColor.PRIMARY)
    else:
        keyboard.add_button('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', color=VkKeyboardColor.NEGATIVE)
    return keyboard


def generate_keyboard_rules():
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button('üí¶üëèüßº', color=VkKeyboardColor.PRIMARY)
    keyboard.add_button('üë´', color=VkKeyboardColor.PRIMARY)
    keyboard.add_button('üôäüôàüôâ', color=VkKeyboardColor.PRIMARY)
    keyboard.add_line()
    keyboard.add_button('üò∑', color=VkKeyboardColor.PRIMARY)
    keyboard.add_button('üíä', color=VkKeyboardColor.PRIMARY)
    keyboard.add_line()
    keyboard.add_button('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', color=VkKeyboardColor.PRIMARY)
    return keyboard


def gen_true_false_keyboard():
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button('–î–∞', color=VkKeyboardColor.PRIMARY)
    keyboard.add_button('–ù–µ—Ç', color=VkKeyboardColor.NEGATIVE)
    return keyboard


def gen_result_keyboard():
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button('–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', color=VkKeyboardColor.PRIMARY)
    return keyboard


def answer_checking(vk, uid, msg):
    global name, surname

    users_answer = msg.text
    session = db_session.create_session()
    if users_answer == '–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç':
        try:
            ind = Indicators()
            ind.user = session.query(User).filter(User.name == name, User.surname == surname).first().id
            ind.temperature = float(users_data[uid]['answers'][0].replace(',', '.'))
            ind.contact_with_people = users_data[uid]['answers'][1]
            ind.abroad = users_data[uid]['answers'][2]
            ind.people_with_corona = users_data[uid]['answers'][3]
            ind.do_user_know_about = users_data[uid]['answers'][4]
            ind.self_isolatioon = users_data[uid]['answers'][5]
            ind.address = users_data[uid]['answers'][6]
            session.add(ind)
            session.commit()
            session.close()
        except:
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message='''–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–ª–∏ –ø—Ä–∞–≤–∏–ª–∞.''',
                             keyboard=generate_keyboard(2).get_keyboard())
      
        b = {'contact_with_people': {True: 1, False: 0},
             'abroad': {True: 1, False: 0},
             'people_with_corona': {True: 1, False: 0},
             'do_user_know_about': {True: 0, False: 1},
             'self_isolatioon': {True: 0, False: 1}}
        ball = b['contact_with_people'][users_data[uid]['answers'][1]] + \
               b['abroad'][users_data[uid]['answers'][2]] + \
               b['people_with_corona'][users_data[uid]['answers'][3]] + \
               b['do_user_know_about'][users_data[uid]['answers'][4]] + \
               b['self_isolatioon'][users_data[uid]['answers'][5]] + \
               users_data[uid]['answers'][0] / 36.6

        if not users_data[uid]['answers'][4]:
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message='''–ï—Å–ª–∏ –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ –±–æ—Ä—å–±–µ —Å –≤–∏—Ä—É—Å–æ–º, –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å 
                             –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é. 
                             –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!''',
                             keyboard=generate_keyboard(2).get_keyboard())
        if users_data[uid]['answers'][3] or users_data[uid]['answers'][2] and float(users_data[uid]['answers'][0]) < 37.0:
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message='''–•–æ—Ç—å —É –í–∞—Å –∏ –Ω–µ—Ç —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º 
                             –ø—Ä–æ–π—Ç–∏ 14-–¥–Ω–µ–≤–Ω—ã–π, —á—Ç–æ–±—ã –æ–±–µ–∑–æ–ø–∞—Å–∏—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö –æ—Ç –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞''',
                             keyboard=generate_keyboard(2).get_keyboard())
        if float(users_data[uid]['answers'][0]) >= 37.0:
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message='''–ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É!!!''',
                             keyboard=generate_keyboard(2).get_keyboard())
        if not users_data[uid]['answers'][5] or users_data[uid]['answers'][1]:
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message='''–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Å–∞–º–æ–∏–∑–æ—è—Ü–∏—é —Ç—è–∂–µ–ª–æ. 
                             –ù–æ —Ç–µ–º —Å–∞–º—ã–º –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–æ—Å—Ç –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏.''',
                             keyboard=generate_keyboard(2).get_keyboard())
        if int(ball) == 1:
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message='''–í—ã –º–æ–ª–æ–¥–µ—Ü! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–æ—Å—Ç –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏!!!''',
                             keyboard=generate_keyboard(2).get_keyboard())

    if users_answer == 'üí¶üëèüßº':
        a = '''1. –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–π—Ç–µ —Ä—É–∫–∏
–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Ä—É–∫–∏ —Å–ø–∏—Ä—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∏–ª–∏ –º–æ–π—Ç–µ –∏—Ö —Å –º—ã–ª–æ–º. 
–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?  –ï—Å–ª–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ä—É–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∏—Ä—É—Å, —Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É–∫ —Å–ø–∏—Ä—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∏–ª–∏ –º—ã—Ç—å–µ –∏—Ö —Å –º—ã–ª–æ–º —É–±—å–µ—Ç –µ–≥–æ.'''
        vk.messages.send(user_id=uid, random_id=get_random_id(),
                         message=a,
                         keyboard=generate_keyboard_rules().get_keyboard())
    elif users_answer == 'üë´':
        a = '''2. –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
–î–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –ª—é–¥–µ–π –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 –º–µ—Ç—Ä–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —É –Ω–∏—Ö –∫–∞—à–µ–ª—å, –Ω–∞—Å–º–æ—Ä–∫ –∏ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –ö–∞—à–ª—è—è –∏–ª–∏ —á–∏—Ö–∞—è, —á–µ–ª–æ–≤–µ–∫, –±–æ–ª–µ—é—â–∏–π —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–µ–π, —Ç–∞–∫–æ–π –∫–∞–∫ 2019-nCoV, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –≤–æ–∫—Ä—É–≥ —Å–µ–±—è –º–µ–ª—å—á–∞–π—à–∏–µ –∫–∞–ø–ª–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤–∏—Ä—É—Å. –ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ç–∞–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, —Ç–æ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–∑–∏—Ç—å—Å—è –≤–∏—Ä—É—Å–æ–º –ø—Ä–∏ –≤–¥—ã—Ö–∞–Ω–∏–∏ –≤–æ–∑–¥—É—Ö–∞.
'''
        vk.messages.send(user_id=uid, random_id=get_random_id(),
                         message=a,
                         keyboard=generate_keyboard_rules().get_keyboard())

    elif users_answer == 'üôäüôàüôâ':
        a = '''3. –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ —Ä—É–∫–∞–º–∏ –≥–ª–∞–∑–∞, –Ω–æ—Å –∏ —Ä–æ—Ç
–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –†—É–∫–∏ –∫–∞—Å–∞—é—Ç—Å—è –º–Ω–æ–≥–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∏—Ä—É—Å. –ü—Ä–∏–∫–∞—Å–∞—è—Å—å —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –∏–Ω—Ñ–µ–∫—Ü–∏—é —Ä—É–∫–∞–º–∏ –∫ –≥–ª–∞–∑–∞–º, –Ω–æ—Å—É –∏–ª–∏ —Ä—Ç—É, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–∏—Ä—É—Å —Å –∫–æ–∂–∏ —Ä—É–∫ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º.
'''
        vk.messages.send(user_id=uid, random_id=get_random_id(),
                         message=a,
                         keyboard=generate_keyboard_rules().get_keyboard())
    elif users_answer == 'üò∑':
        a = '''4. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–æ–π –≥–∏–≥–∏–µ–Ω—ã
–ü—Ä–∏ –∫–∞—à–ª–µ –∏ —á–∏—Ö–∞–Ω–∏–∏ –ø—Ä–∏–∫—Ä—ã–≤–∞–π—Ç–µ —Ä–æ—Ç –∏ –Ω–æ—Å —Å–∞–ª—Ñ–µ—Ç–∫–æ–π –∏–ª–∏ —Å–≥–∏–±–æ–º –ª–æ–∫—Ç—è; —Å—Ä–∞–∑—É –≤—ã–∫–∏–¥—ã–≤–∞–π—Ç–µ —Å–∞–ª—Ñ–µ—Ç–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º—É—Å–æ—Ä–∞ —Å –∫—Ä—ã—à–∫–æ–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Ä—É–∫–∏ —Å–ø–∏—Ä—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫–æ–º –∏–ª–∏ –º–æ–π—Ç–µ –∏—Ö –≤–æ–¥–æ–π —Å –º—ã–ª–æ–º.
–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –ü—Ä–∏–∫—Ä—ã–≤–∞–Ω–∏–µ —Ä—Ç–∞ –∏ –Ω–æ—Å–∞ –ø—Ä–∏ –∫–∞—à–ª–µ –∏ —á–∏—Ö–∞–Ω–∏–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏—Ä—É—Å–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –±–æ–ª–µ–∑–Ω–µ—Ç–≤–æ—Ä–Ω—ã—Ö –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤. –ï—Å–ª–∏ –ø—Ä–∏ –∫–∞—à–ª–µ –∏–ª–∏ —á–∏—Ö–∞–Ω–∏–∏ –ø—Ä–∏–∫—Ä—ã–≤–∞—Ç—å –Ω–æ—Å –∏ —Ä–æ—Ç —Ä—É–∫–æ–π, –º–∏–∫—Ä–æ–±—ã –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –≤–∞—à–∏ —Ä—É–∫–∏, –∞ –∑–∞—Ç–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –ª—é–¥–µ–π, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø—Ä–∏–∫–∞—Å–∞–µ—Ç–µ—Å—å.
'''
        vk.messages.send(user_id=uid, random_id=get_random_id(),
                         message=a,
                         keyboard=generate_keyboard_rules().get_keyboard())
    elif users_answer == 'üíä':
        a = '''5. –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫–∞—à–ª—è –∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–∏ –¥—ã—Ö–∞–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é
–ï—Å–ª–∏ –≤—ã –ø–æ—Å–µ—â–∞–ª–∏ —Ä–∞–π–æ–Ω—ã –ö–∏—Ç–∞—è, –≥–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è 2019-nCoV, –∏–ª–∏ —Ç–µ—Å–Ω–æ –æ–±—â–∞–ª–∏—Å—å —Å –∫–µ–º-—Ç–æ, —É –∫–æ–≥–æ –ø–æ—Å–ª–µ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–∏–º–ø—Ç–æ–º—ã —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É —Ä–∞–±–æ—Ç–Ω–∏–∫—É.
–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –∫–∞—à–µ–ª—å –∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–µ –¥—ã—Ö–∞–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é, –ø–æ—Å–∫–æ–ª—å–∫—É –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–µ–π –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä—å–µ–∑–Ω—ã–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º. –°–∏–º–ø—Ç–æ–º—ã –ø–æ—Ä–∞–∂–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–æ–≤ –¥—ã—Ö–∞–Ω–∏—è –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–∞–º—ã–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –ø–æ–µ–∑–¥–æ–∫ –∏ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å 2019-nCoV.'''
        vk.messages.send(user_id=uid, random_id=get_random_id(),
                         message=a,
                         keyboard=generate_keyboard_rules().get_keyboard())
    elif users_answer.lower() in ['–º–µ–Ω—é', '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']:
        menu(vk, uid)
    if users_answer != '–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç':
        if 'answers' not in users_data[uid]:
            users_data[uid]['answers'] = []
        if users_answer in answers:
            users_data[uid]['answers'].append(answers[users_answer])
        else:
            if users_data[uid]['current_quest'][0] == '–ö–∞–∫–∞—è —É –í–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?':
                users_data[uid]['answers'].append(float(users_answer))
            else:
                users_data[uid]['answers'].append(users_answer)

        send_next(vk, uid)


def send_next(vk, uid):
    try:
        current_quest = next(users_data[uid]['quest'])
        users_data[uid]['current_quest'] = current_quest
        keyb = current_quest[1]
        if keyb == 0:
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message=current_quest[0])
        elif keyb == 1:
            keyboard = gen_true_false_keyboard()
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message=current_quest[0], keyboard=keyboard.get_keyboard())
        elif keyb == 2:
            keyboard = gen_result_keyboard()
            vk.messages.send(user_id=uid, random_id=get_random_id(),
                             message=current_quest[0], keyboard=keyboard.get_keyboard())

    except Exception as e:
        print(e)


def new_user(response, vk, uid):
    message = f"–ü—Ä–∏–≤–µ—Ç, {response[0]['first_name']}!"
    vk.messages.send(user_id=uid,
                     message=message,
                     random_id=get_random_id())
    vk.messages.send(user_id=uid,
                     message='–ü—Ä–æ—á—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –±–æ—Ç—É –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã',
                     random_id=get_random_id())
    menu(vk, uid)


def menu(vk, uid):
    users_data[uid]['state'] = 2
    keyboard = generate_keyboard(2)
    vk.messages.send(user_id=uid,
                     message='–ú–µ–Ω—é', keyboard=keyboard.get_keyboard(),
                     random_id=get_random_id())


def show_news(vk, uid):
    news = parse_news()
    keyboard = generate_keyboard(2)
    for x in news:
        vk.messages.send(user_id=uid,
                         message='\n'.join(x), keyboard=keyboard.get_keyboard(),
                         random_id=get_random_id())


def show_rules(vk, uid):
    vk.messages.send(user_id=uid, message=RULES,
                     random_id=get_random_id(), keyboard=generate_keyboard_rules().get_keyboard())


def show_map(vk, uid):
    b = {'contact_with_people': {True: 1, False: 0},
         'abroad': {True: 1, False: 0},
         'people_with_corona': {True: 1, False: 0},
         'do_user_know_about': {True: 0, False: 1},
         'self_isolatioon': {True: 0, False: 1}}
    session = db_session.create_session()
    ball = [b['contact_with_people'][t.contact_with_people] +
            b['abroad'][t.abroad] +
            b['people_with_corona'][t.people_with_corona] +
            b['do_user_know_about'][t.do_user_know_about] +
            b['self_isolatioon'][t.self_isolatioon] +
            (t.temperature / 36.6) for t in session.query(Indicators).all()]
    people_add = [t.address for t in session.query(Indicators).all()]
    p = list(zip(ball, people_add))
    params = []
    for x in p:
        if x[0] > 4:
            params.append(get_ll_span(x[1])[0] + ',pmrdl' + str(int(x[0])))
        else:
            params.append(get_ll_span(x[1])[0] + ',pmwtl' + str(int(x[0])))
    params = '~'.join(params)
    show_maps('–†–æ—Å—Å–∏—è, –°–∞—Ä–∞—Ç–æ–≤', add_params=params)
    upload = vk_api.VkUpload(vk)
    photo = upload.photo_messages('static/img/map.png')
    owner_id = photo[0]['owner_id']
    photo_id = photo[0]['id']
    access_key = photo[0]['access_key']
    attachment = f'photo{owner_id}_{photo_id}_{access_key}'
    vk.messages.send(user_id=uid, random_id=get_random_id(), attachment=attachment,
                     keyboard=generate_keyboard(2).get_keyboard())


def main():
    global name, surname
    longpoll = VkBotLongPoll(vk_session, GROUP_ID)
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            vk = vk_session.get_api()
            uid = event.message.from_id
            response = vk.users.get(user_id=uid)
            users_data[uid] = users_data.get(uid, dict())
            user = vk.users.get(user_ids=uid, fields=['city'])[0]
            name, surname = user["first_name"], user["last_name"]
            try:
                if 'state' not in users_data[uid]:
                    new_user(response, vk, uid)
                    users_data[uid]['quest'] = iter(QUESTIONS)
                elif event.message.text.lower() in ['–º–µ–Ω—é', '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']:
                    menu(vk, uid)
                elif users_data[uid]['state'] == 2:
                    if event.message.text.lower() == '–∫–∞—Ä—Ç–∞':
                        show_map(vk, uid)
                    elif event.message.text.lower() == '–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É':
                        send_next(vk, uid)
                    elif event.message.text.lower() == '–ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ —ç–ø–∏–¥–µ–º–∏–∏':
                        show_rules(vk, uid)
                    elif event.message.text.lower() == '–Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–µ':
                        show_news(vk, uid)
                    elif event.message.text:
                        answer_checking(vk, uid, event.message)
                    else:
                        raise MessageError
                else:
                    raise MessageError
            except MessageError:
                keyboard = generate_keyboard(users_data[uid])
                vk.messages.send(user_id=uid, message='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                                 random_id=get_random_id(), keyboard=keyboard.get_keyboard())


if __name__ == '__main__':
    main()
